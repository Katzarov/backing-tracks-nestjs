import { createReadStream, createWriteStream } from 'node:fs';

import { pipeline } from 'node:stream/promises';
import { PassThrough, Readable } from 'node:stream';

import { randomUUID } from 'crypto';
import { FiLE_EXTENSIONS } from './constants';
import { TrackFileSetup } from './TrackFileSetup';
import { TrackFileSetupOptions } from './TrackFileSetup';

export type TrackFileUri = string;

export class TrackFile extends TrackFileSetup {
  uri: string;

  /**
   * Creates track file object with random uuid as uri.
   * @param options
   */
  constructor(options: TrackFileSetupOptions);

  /**
   * Creates track file object from an existing uuid as uri.
   * @param options
   * @param uri
   */
  constructor(options: TrackFileSetupOptions, uri: string);

  constructor(options: TrackFileSetupOptions, uri?: string) {
    super(options);

    if (uri === undefined) {
      this.uri = randomUUID();
    } else {
      this.uri = uri;
    }
  }

  /**
   *
   * Saves the mp4 file generated by the YTDL to disk
   *
   * @param stream
   * @returns
   */
  saveMp4ToDisk(stream: Readable | PassThrough) {
    const writeStream = createWriteStream(
      `${this.downloadedTracksPath}/${this.uri}.${FiLE_EXTENSIONS.MP4}`,
      {
        encoding: 'utf-8',
      },
    );
    return pipeline(stream, writeStream);
  }

  getMp4ReadStreamFromDisk() {
    return createReadStream(
      `${this.downloadedTracksPath}/${this.uri}.${FiLE_EXTENSIONS.MP4}`,
    );
  }

  /**
   *
   * Saves the mp3 file generated by the file-converter to disk
   *
   * @param stream
   * @returns
   */
  saveMp3ToDisk(audioSteam: PassThrough) {
    const writeStream = createWriteStream(
      `${this.convertedTracksPath}/${this.uri}.${FiLE_EXTENSIONS.MP3}`,
      {
        encoding: 'utf-8',
      },
    );
    return pipeline(audioSteam, writeStream);
  }

  getMp3ReadStreamFromDisk() {
    return createReadStream(
      `${this.convertedTracksPath}/${this.uri}.${FiLE_EXTENSIONS.MP3}`,
    );
  }
}

